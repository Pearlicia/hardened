Step 1:
Document 5 concrete attack surface areas for the Docker environment and 5 concrete attack surface 
areas for the Kubernetes control plane, etcd, and worker.

Docker:
(1) Docker Host:
Information Disclosure - The Docker host file system may be misconfigured, exposing sensitive 
information and leading to insecure defaults.

Spoofing - This can occur when a sidecar container has intentional access to the primary 
container's namespace and may spoof the namespace used by the primary container, 
resulting in isolation tampering. You should be careful with using sidecar containers.


(2) Docker Client
Client compromise: the Docker desktop running on the administrator's machine
Client authorization abuse: abuse of the client's authorization to make privileged changes

Spoofing - Client traffic from the Docker client to the Docker daemon or registry could be spoofed,
 or intercepted by a malicious party and replayed. Transport Layer Security (TLS) can be 
 implemented to secure communication affecting the client.

(3) Docker Daemon
Tampering - Daemon configuration may be tampered with by a compromised client, leading to 
misconfiguration.

Denial of Service - Daemon memory for the running container may be over-allocated, leading 
to a misconfiguration.

(4) Container Images And Build File
Elevation of Privilege - when a Dockerfile does not specify a user, it defaults to executing the 
container using the root user, affecting client authorization and the Dockerfile.

(5) Docker Registry:
Tampering - Container image may be tampered with, leading to supply chain injections. 
This is the biggest risk regarding the supply chain. An attacker may implant a malicious 
image into the image registry and entice organizations to use it. Alternatively, an attacker 
may introduce open source libraries in popular hosted repositories and encourage organizations 
to use them. This can affect both image security and Open Source Software security.

Kubernetes:

(1) kube-apiserver: 
This is the primary control plane that exposes the Kubernetes API. The API server is the 
front end for the Kubernetes control plane.

Elevation of Privilege - privilege can be abused by using the privileged flag. 
This should be avoided in all cases. This affects kube-apiserver.

Spoofing - Calls to the API server could be spoofed by a malicious caller. 
This can be mitigated by ensuring all calls to the API server are over TLS, 
ensuring that anonymous and basic authentication is not used.

(2) etcd:
etcd is a consistent and highly-available key-value store used as Kubernetes' 
backing store for all cluster data.

Tampering - The configuration of etcd may be tampered with by an attacker, 
modifying vital system-level configurations such as pod specs. This can be mitigated 
by restricting permissions on etcd files to 644 or more restrictive and that the pod 
spec file is set to root ownership.

(3) kube-scheduler:
kube-scheduler is a control plane component that watches for newly created 
Pods with no assigned node and selects a node for them to run on.

Denial of Service - excessive traffic to the API server can overwhelm the endpoint. 
kube-scheduler can incorrectly schedule the pod.

(4) kubelet:
kubelet is an agent that runs on each node in the cluster. It makes sure that 
containers are running in a Pod.

Tampering - The kubelet configuration can be tampered with. Specifically,
 the kubelet.conf worker configuration file can be tampered with. Make sure 
 to set the permission to 644 or more restrictive.

 Elevation of Privilege - Kubelet can be subject to an elevation of privilege. 
 To ensure privileges cannot be escalated, make sure the authorization mode 
 argument is not set to always allow.


(5) kube-proxy
kube-proxy is a network proxy that runs on each node in your cluster, maintaining
network rules on nodes. These network rules allow network communication to your Pods 
from network sessions inside or outside of your cluster.

Information Disclosure - Kube-proxy can expose sensitive information. 
To ensure the kube-proxy does not expose information, the --kubeconfig 
should be set to permissions 644 or less permissive.


Step 2:
From the failed findings, select and document 3 failed findings from the Docker-bench results that 
you want to harden. These 3 findings should confirm 3 out of the 5 attack surface areas you 
identified for Docker in Step 1. At least 1 of the 3 findings should be different from the ones 
mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).

(1) [FAIL] 5.10 Ensure that the memory usage for container is limited (Automated)

According to the CIS Docker Benchmark (provided courtesy of the Center for Internet Security),

By default, all containers on a Docker host share resources equally. By using the resource management 
capabilities of the Docker host, you can control the amount of memory that a container is able to use.


By default, a container can use all of the memory on the host. You can use memory limit mechanisms to 
prevent a denial of service (i.e. when one container consumes all of the hostâ€™s resources and the 
other containers on the same host are therefore not able to function). Having no limit on memory 
usage can lead to issues where one container can easily make the whole system unstable and as a 
result unusable. 

(2) [FAIL] 3.17 Ensure that the daemon.json file ownership is set to root:root (Automated)

According to the CIS Docker Benchmark (provided courtesy of the Center for Internet Security),

You should verify that the daemon.json file individual ownership and group ownership is
correctly set to root .

The daemon.json file contains sensitive parameters that could alter the behavior of the
docker daemon. It should therefore be owned and group owned by root to ensure it can
not be modified by less privileged users.


(3) [FAIL] 4.5 Ensure Content trust for Docker is Enabled (Automated)

According to the CIS Docker Benchmark (provided courtesy of the Center for Internet Security),

Content trust is disabled by default and should be enabled in line with organizational
security policy.

Content trust provides the ability to use digital signatures for data sent to and received
from remote Docker registries. These signatures allow client-side verification of the
identity and the publisher of specific image tags and ensures the provenance of container
images.


