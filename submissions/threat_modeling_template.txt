Docker Threat Modeling
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.
- A fork bomb (multiple forks of a single image) could be used to create a denial of service attack.
- A vulnerability in a container could be exploited to gain unauthorized access to the host system.
- Container image permissions may be elevated using the --privilege flag. Image libraries may contain security flaws. This can affect image security. This can be used to elevate privileges on the host system.
- Sensitive data such as secrets may be left in the container image and exposed at runtime affecting image security and potentially much more, depending on the scope of the credentials. This would affect image security. This can be used for an information disclosure attack.
- Host devices exposed to containers (such as USB devices) could be used to create a denial of service attack. 

Kubernetes Threat Modeling
Given Kubernetes' system components and the STRIDE framework, identify five potential threats that may arise.
- A vulnerability in Kubelet could be exploited to gain unauthorized access to the host system.
- A vulnerability in the Kube-ApiServer could be exploited for a spoofing attack.
- A vulnerability in the etcd could be exploited for an information disclosure attack.
- A vulnerability in the Kube-Scheduler could be exploited for a denial of service attack.
- A vulnerability in the Kube-Proxy could be exploited for an information disclosure attack.


Step 2:
From the failed findings, select and document 3 failed findings from the Docker-bench results that 
you want to harden. These 3 findings should confirm 3 out of the 5 attack surface areas you 
identified for Docker in Step 1. At least 1 of the 3 findings should be different from the ones 
mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).

(1)[FAIL] 5.10 Ensure that the memory usage for container is limited (Automated)

According to the CIS Docker Benchmark (provided courtesy of the Center for Internet Security),

By default, all containers on a Docker host share resources equally. By using the resource management 
capabilities of the Docker host, you can control the amount of memory that a container is able to use.


By default, a container can use all of the memory on the host. You can use memory limit mechanisms to 
prevent a denial of service (i.e. when one container consumes all of the hostâ€™s resources and the 
other containers on the same host are therefore not able to function). Having no limit on memory 
usage can lead to issues where one container can easily make the whole system unstable and as a 
result unusable. 

(2) [FAIL] 5.11 Ensure that CPU priority is set appropriately on containers (Automated)

According to the CIS Docker Benchmark (provided courtesy of the Center for Internet Security),

By default, all containers on a Docker host share resources equally. By using the resource
management capabilities of the Docker host you can control the host CPU resources that a
container may consume.

By default, CPU time is divided between containers equally. If you wish to control available
CPU resources amongst container instances, you can use the CPU sharing feature. CPU
sharing allows you to prioritize one container over others and prevents lower priority
containers from absorbing CPU resources which may be required by other processes. This
ensures that high priority containers are able to claim the CPU runtime they require.


(3) [FAIL] 5.28 Ensure that the PIDs cgroup limit is used (Automated)

According to the CIS Docker Benchmark (provided courtesy of the Center for Internet Security),

You should use the --pids-limit flag at container runtime.

Attackers could launch a fork bomb with a single command inside the container. This fork
bomb could crash the entire system and would require a restart of the host to make the
system functional again. Using the PIDs cgroup parameter --pids-limit would prevent
this kind of attack by restricting the number of forks that can happen inside a container
within a specified time frame.



